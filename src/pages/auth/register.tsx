import type { NextPage } from 'next'
import { useEffect } from 'react'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { toast } from 'react-toastify'
import { useTranslation } from 'react-i18next'
import { Formik, Form } from 'formik'

import { InputFormik, NameFamilyFormik, DateBirthFormik, PassPassConfirmFormik, ButtonLoading } from '../../components/global/formik'
import { initialValues, registerSchema } from '../../schemas/register'
import TitleForm from '../../components/user/auth/titleForm'
import { getTheme } from '../../modules/helperFunctions'
import TearmPrivacy from '../../components/user/auth/tearmPrivacy'
import { createUserService } from '../../services/users'
import LoginRegisterSwitch from '../../components/user/auth/loginRegisterSwitch'
import { UserFlex } from '../../models/user'

const Register: NextPage & any = () => {

    const router = useRouter()

    const {t, i18n: {language}} = useTranslation()

    useEffect(() => {
        (localStorage?.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) ? window.document.documentElement.classList.add('dark'): window.document.documentElement.classList.remove('dark')
    }, [])

    const submitHandler = async (values: UserFlex, options: any) => {
        try {
            await create(values)
            toast.success(t('responses.successfulRegistration'), {...getTheme()})
            router.push('/auth/login')
        } catch (errors: any) {
            toast.error(t('responses.axiosError'), {...getTheme()})
        }
    }

    const create = (values: UserFlex) => {
        return new Promise(async (resolve: any, reject: any) => {
            try {
                await createUserService({...values, created_at: Date.now()})
                return resolve()
            } catch (err) {
                return reject(err)
            }
        })
    }

    const checkFormError = (isError: number) => isError && toast.error(t('responses.formErrors'), {...getTheme()})

    return (
        <>
            <Head>
                <title>{t('menu.register')}</title>
                <meta name="description" content="Generated by create next app" />
            </Head>

            <div className="flex flex-col justify-center items-center md:my-8 animate-slow-1000">

                <div className="bg-white dark:bg-gray-800/50 md:border border-gray-300/80 dark:border-gray-700/60 md:rounded-2xl p-6 w-full md:w-[600px]">

                    <TitleForm title={t('menu.register')} />

                    <Formik initialValues={initialValues} validationSchema={() => registerSchema(language)} onSubmit={submitHandler}>
                        {({errors, isSubmitting}) => (
                            <Form>
                                <NameFamilyFormik />
                                <InputFormik name="email" dir="ltr" />
                                <DateBirthFormik />
                                <PassPassConfirmFormik />
                                
                                <ButtonLoading onClick={() => checkFormError(Object.keys(errors).length)} isSubmit={isSubmitting} type="submit" widthFull className="mt-6">{t('buttons.register')}</ButtonLoading>
                            </Form>
                        )}
                    </Formik>

                    <LoginRegisterSwitch to="login" />

                </div>

                <TearmPrivacy />

            </div>
        </>
    )
}

Register.layout = null

export default Register



/*
import type { NextPage } from 'next'
import { useEffect } from 'react'
import Head from 'next/head'
import { useRouter } from 'next/router'
import useForm from '../../hooks/useForm'
import { toast } from 'react-toastify'
import { useTranslation } from 'react-i18next'

import { initialvalues, registerSchema } from '../../schemas/register'
import { ColumnGridWrap, InputForm, DateBirthForm, ButtonLoading } from '../../components/global/form'
import TitleForm from '../../components/user/auth/titleForm'
import { getTheme } from '../../modules/helperFunctions'
import TearmPrivacy from '../../components/user/auth/tearmPrivacy'
import { createUserService } from '../../services/users'
import LoginRegisterSwitch from '../../components/user/auth/loginRegisterSwitch'

const Register: NextPage & any = () => {

    const {data, errors, setErrors, mapYupErrors, isSubmit, setIsSubmit, inputHandler} = useForm(initialvalues)

    const router = useRouter()

    const {t, i18n: {language}} = useTranslation()

    useEffect(() => {
        (localStorage?.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) ? window.document.documentElement.classList.add('dark'): window.document.documentElement.classList.remove('dark')
    }, [])

    const submitHandler = async (e: any) => {
        try {
            e.preventDefault()
            setIsSubmit('create')
            await registerSchema(language).validate(data, {abortEarly: false})
            await create()
            setErrors({})
            toast.success(t('responses.successfulRegistration'), {...getTheme()})
            router.push('/auth/login')
        } catch (errors: any) {
            if (errors?.name === 'AxiosError') return toast.error(t('responses.axiosError'), {...getTheme()})
            setErrors(mapYupErrors(errors))
            toast.error(t('responses.formErrors'), {...getTheme()})
        } finally {
            setIsSubmit('')
        }
    }

    const create = () => {
        return new Promise(async (resolve: any, reject: any) => {
            try {
                await createUserService({...data, created_at: Date.now()})
                return resolve()
            } catch (err) {
                return reject(err)
            }
        })
    }

    const getDir = (): string => language === 'fa' ? 'rtl' : 'ltr'

    return (
        <>
            <Head>
                <title>{t('menu.register')}</title>
                <meta name="description" content="Generated by create next app" />
            </Head>

            <div className="flex flex-col justify-center items-center md:my-8 animate-slow-1000">

                <div className="bg-white dark:bg-gray-800/50 md:border border-gray-300/80 dark:border-gray-700/60 md:rounded-2xl p-6 w-full md:w-[600px]">

                    <TitleForm title={t('menu.register')} />

                    <form onSubmit={submitHandler}>
                        <ColumnGridWrap cols="2" gap="3">
                            <InputForm dir={getDir()} label={t('fields.name')} keyname="name" value={data.name} error={errors.name} inputHandler={inputHandler} />
                            <InputForm dir={getDir()} label={t('fields.family')} keyname="family" value={data.family} error={errors.family} inputHandler={inputHandler} />
                        </ColumnGridWrap>
                        <DateBirthForm label={t('fields.dateBirth')} value={{day: data.day, month: data.month, year: data.year}} error={errors.day || errors.month || errors.year ? true : false} inputHandler={inputHandler} />
                        <InputForm label={t('fields.email')} keyname="email" value={data.email} error={errors.email} dir="ltr" inputHandler={inputHandler} />
                        <ColumnGridWrap cols="2" gap="3">
                            <InputForm label={t('fields.password')} type="password" keyname="password" value={data.password} error={errors.password} dir="ltr" inputHandler={inputHandler} />
                            <InputForm label={t('fields.passwordConfirmation')} type="password" keyname="passwordConfirmation" value={data.passwordConfirmation} error={errors.passwordConfirmation} dir="ltr" inputHandler={inputHandler} />
                        </ColumnGridWrap>
                        <ButtonLoading isSubmit={isSubmit} type="submit" widthFull className="mt-6">{t('buttons.register')}</ButtonLoading>
                    </form>

                    <LoginRegisterSwitch to="login" />

                </div>

                <TearmPrivacy />

            </div>
        </>
    )
}

Register.layout = null

export default Register
*/