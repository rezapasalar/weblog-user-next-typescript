import type { NextPage, GetServerSideProps } from 'next'
import Head from 'next/head'
import { useTranslation } from 'react-i18next'

import { searchArticleServiceWithFetch } from '../../services/articles'
import ErrorBoundary from '../../components/user/single-article/errorBoundary'
import ShowArticle from '../../components/user/single-article/show'
import Sidebar from '../../components/user/single-article/sidebar'
import Comment from '../../components/user/single-article/comment'
import PageWrap from '../../components/global/wraps/page'
import Article from '../../models/article'

interface Props {
    article: Article,
    isError: any
}

const SingleArticle: NextPage<Props> = ({article = null, isError = false}) => {

    const {t, i18n: {language}} = useTranslation()

    return (
        <PageWrap>
            <Head>
                <title>{language === 'fa' ? article?.title : t('singleArticlePage.title')}</title>
                <meta name="description" content="Generated by create next app" />
            </Head>
            
            <div className="grid grid-cols-12 gap-6">
                <aside className="xl:col-span-3 lg:col-span-4 col-span-12 lg:order-1 order-2">
                    <Sidebar />
                </aside>

                <main className="xl:col-span-9 lg:col-span-8 col-span-12 lg:order-2 order-1">
                    {isError
                        ?   <ErrorBoundary isError={isError} />
                        :
                            <>
                                <ShowArticle {...article} />
                                <Comment />
                            </>
                    }
                </main>
            </div>
        </PageWrap>
    )
}

export const getServerSideProps: GetServerSideProps = async (context: any) => {
    try {
        const {data} = await searchArticleServiceWithFetch('slug', context.params.slug)
        if (!data.length) throw ({code: 404})
        return {props: {article: data[0]}}
    } catch (error: any) {
        return {props: {isError: 'code' in error ? error.code : true}}
    }
}

export default SingleArticle